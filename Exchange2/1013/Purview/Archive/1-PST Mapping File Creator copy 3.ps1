#Requires -Modules PSWriteHTML

function Get-MailboxFromPSTName {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)]
        [string]$PSTName,
        
        [Parameter(Mandatory)]
        [string]$DomainName
    )
    
    # Extract username from PST name pattern (username_archive_timestamp.pst)
    if ($PSTName -match '^([^_]+)_archive_\d{8}_\d{6}\.pst$') {
        $username = $Matches[1]
        # Handle special case for ri-support
        if ($username -eq 'risupport') {
            $username = 'ri-support'
        }
        return "$username@$DomainName"
    }
    
    Write-Warning "Could not extract mailbox from PST name: $PSTName"
    return $null
}

function New-PSTMappingFile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)]
        [string]$PSTFolder,
        
        [Parameter(Mandatory)]
        [string]$DomainName,
        
        [Parameter()]
        [bool]$IsArchive = $false,
        
        [Parameter()]
        [string]$OutputPath = ".\PST_Mapping",
        
        [Parameter()]
        [string]$TargetRootFolder = "/"
    )

    # Ensure output directory exists
    $null = New-Item -ItemType Directory -Force -Path $OutputPath
    
    # Generate timestamp for the file names
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $csvPath = Join-Path $OutputPath "PST_Mapping_$timestamp.csv"
    $htmlPath = Join-Path $OutputPath "PST_Mapping_$timestamp.html"
    
    # Initialize collection for mappings
    $mappings = [System.Collections.Generic.List[object]]::new()
    
    # Get all PST files
    $pstFiles = Get-ChildItem -Path $PSTFolder -Filter "*.pst"
    
    foreach ($pst in $pstFiles) {
        $targetMailbox = Get-MailboxFromPSTName -PSTName $pst.Name -DomainName $DomainName
        
        if (-not $targetMailbox) {
            Write-Warning "Skipping $($pst.Name) - Could not determine target mailbox"
            continue
        }

        $mapping = [PSCustomObject]@{
            'Workload' = 'Exchange'
            'FilePath' = ''
            'Name' = $pst.Name
            'Mailbox' = $targetMailbox
            'IsArchive' = $IsArchive.ToString().ToUpper()
            'TargetRootFolder' = $TargetRootFolder
            'ContentCodePage' = ''
            'SPFileContainer' = ''
            'SPManifestContainer' = ''
            'SPSiteUrl' = ''
            'FullPath' = $pst.FullName
            'SizeMB' = [math]::Round($pst.Length / 1MB, 2)
            'LastWriteTime' = $pst.LastWriteTime
        }
        
        $mappings.Add($mapping)
    }

    # Export to CSV (Microsoft format)
    $mappings | Select-Object -ExcludeProperty FullPath, SizeMB, LastWriteTime | 
        Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8

    # Create metadata for report
    $metadata = @{
        GeneratedBy = $env:USERNAME
        GeneratedOn = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        TotalPSTFiles = $mappings.Count
        TotalSizeMB = [math]::Round(($mappings | Measure-Object -Property SizeMB -Sum).Sum, 2)
        DomainName = $DomainName
        IsArchive = $IsArchive
        MappingFile = $csvPath
    }

    # Generate HTML Report
    New-HTML -TitleText "PST Mapping Report" -FilePath $htmlPath -ShowHTML {
        New-HTMLSection -HeaderText "Generation Summary" {
            New-HTMLPanel {
                New-HTMLText -Text @"
                <h3>Report Details</h3>
                <ul>
                    <li>Generated By: $($metadata.GeneratedBy)</li>
                    <li>Generated On: $($metadata.GeneratedOn)</li>
                    <li>Total PST Files: $($metadata.TotalPSTFiles)</li>
                    <li>Total Size (MB): $($metadata.TotalSizeMB)</li>
                    <li>Domain Name: $($metadata.DomainName)</li>
                    <li>Import to Archive: $($metadata.IsArchive)</li>
                </ul>
"@
            }
        }
        
        New-HTMLSection -HeaderText "PST Mapping Details" {
            New-HTMLTable -DataTable $mappings -ScrollX -Buttons @('copyHtml5', 'excelHtml5', 'csvHtml5') -SearchBuilder {
                New-TableCondition -Name 'SizeMB' -ComparisonType number -Operator gt -Value 1000 -BackgroundColor LightSalmon -Color Black
                New-TableCondition -Name 'SizeMB' -ComparisonType number -Operator lt -Value 100 -BackgroundColor LightGreen -Color Black
            }
        }
    }

    # Console Output
    Write-Host "`nPST Mapping Report Summary:" -ForegroundColor Cyan
    Write-Host "Total PST Files: $($metadata.TotalPSTFiles)" -ForegroundColor Green
    Write-Host "Total Size (MB): $($metadata.TotalSizeMB)" -ForegroundColor Green
    Write-Host "Domain Name: $($metadata.DomainName)" -ForegroundColor Green
    Write-Host "Import to Archive: $($metadata.IsArchive)" -ForegroundColor Green
    Write-Host "`nOutput Files:" -ForegroundColor Cyan
    Write-Host "CSV Mapping: $csvPath" -ForegroundColor Green
    Write-Host "HTML Report: $htmlPath" -ForegroundColor Green

    return $metadata
}

# Example usage
$mappingParams = @{
    PSTFolder = "D:\ExchangeArchives\Import"
    DomainName = "tunngavik.com"
    IsArchive = $true
    TargetRootFolder = "/"
    OutputPath = ".\PST_Mapping"
}

New-PSTMappingFile @mappingParams