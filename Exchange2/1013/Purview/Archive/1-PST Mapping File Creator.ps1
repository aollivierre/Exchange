#Requires -Modules PSWriteHTML

function New-PSTMappingFile {
    param (
        [Parameter(Mandatory)]
        [string]$PSTPath,
        
        [Parameter(Mandatory)]
        [string]$TargetMailbox,
        
        [Parameter()]
        [bool]$IsArchive = $false,
        
        [Parameter()]
        [string]$OutputPath = ".\PST_Mapping",
        
        [Parameter()]
        [string]$ReportName = "PST_Mapping_Report"
    )

    # Ensure output directory exists
    $null = New-Item -ItemType Directory -Force -Path $OutputPath

    # Initialize results array using ArrayList for better performance
    $results = [System.Collections.ArrayList]::new()

    # Create mapping object
    $mapping = [PSCustomObject]@{
        Workload = 'Exchange'
        FilePath = $PSTPath
        Name = (Split-Path $PSTPath -Leaf)
        Mailbox = $TargetMailbox
        IsArchive = $IsArchive.ToString().ToUpper()
        TargetRootFolder = "Imported_$(Get-Date -Format 'yyyyMMdd')"
        ContentCodePage = ''
        SPFileContainer = ''
        SPManifestContainer = ''
        SPSiteUrl = ''
    }

    # Add to results
    $null = $results.Add($mapping)

    # Generate file paths
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $csvPath = Join-Path $OutputPath "$($ReportName)_$timestamp.csv"
    $htmlPath = Join-Path $OutputPath "$($ReportName)_$timestamp.html"

    # Export to CSV
    $results | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8

    # Prepare metadata for report
    $metadata = @{
        GeneratedBy = $env:USERNAME
        GeneratedOn = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        TotalPSTs = $results.Count
        TargetMailbox = $TargetMailbox
        ImportType = if($IsArchive) { "Archive Mailbox" } else { "Primary Mailbox" }
        MappingFile = $csvPath
    }

    # Generate HTML report
    New-HTML -Title "PST Mapping Configuration Report" -FilePath $htmlPath -ShowHTML {
        New-HTMLSection -HeaderText "Mapping Summary" {
            New-HTMLPanel {
                New-HTMLText -Text @"
                <h3>Report Details</h3>
                <ul>
                    <li>Generated By: $($metadata.GeneratedBy)</li>
                    <li>Generated On: $($metadata.GeneratedOn)</li>
                    <li>Total PSTs: $($metadata.TotalPSTs)</li>
                    <li>Target Mailbox: $($metadata.TargetMailbox)</li>
                    <li>Import Type: $($metadata.ImportType)</li>
                    <li>Mapping File: $($metadata.MappingFile)</li>
                </ul>
"@
            }
        }
        
        New-HTMLSection -HeaderText "PST Mapping Details" {
            New-HTMLTable -DataTable $results -ScrollX -Buttons @('copyHtml5', 'excelHtml5', 'csvHtml5') -SearchBuilder {
                New-TableCondition -Name 'IsArchive' -ComparisonType string -Operator eq -Value 'TRUE' -BackgroundColor LightBlue -Color Black
                New-TableCondition -Name 'IsArchive' -ComparisonType string -Operator eq -Value 'FALSE' -BackgroundColor LightGreen -Color Black
            }
        }
    }

    Write-Host "`nReports generated:" -ForegroundColor Green
    Write-Host "CSV Report: $csvPath" -ForegroundColor Green
    Write-Host "HTML Report: $htmlPath" -ForegroundColor Green
    
    return @{
        CSVPath = $csvPath
        HTMLPath = $htmlPath
        MappingDetails = $results
    }
}

# Example usage
$params = @{
    PSTPath = "C:\PST\Administrator_archive_20241205_102100.pst"
    TargetMailbox = "admin@yourdomain.com"  # Replace with actual target mailbox
    IsArchive = $true
    OutputPath = ".\PST_Reports"
}

New-PSTMappingFile @params