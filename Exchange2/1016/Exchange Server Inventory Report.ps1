# Load Exchange Management Shell
Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn -ErrorAction SilentlyContinue
Import-Module PSWriteHTML

function Get-ExchangeServerDetails {
    $exchangeServers = Get-ExchangeServer | Sort-Object Name
    $results = [System.Collections.ArrayList]@()
    
    foreach ($server in $exchangeServers) {
        try {
            # Get OS details using WMI/CIM
            $osInfo = Get-CimInstance -ComputerName $server.Name -ClassName Win32_OperatingSystem -ErrorAction Stop
            $computerSystem = Get-CimInstance -ComputerName $server.Name -ClassName Win32_ComputerSystem -ErrorAction Stop
            
            # Get network adapter configuration
            $networkConfig = Get-CimInstance -ComputerName $server.Name -ClassName Win32_NetworkAdapterConfiguration |
                Where-Object { $_.IPEnabled -eq $true }
            
            # Get FQDN
            try {
                $fqdn = [System.Net.Dns]::GetHostByName($server.Name).HostName
            }
            catch {
                $fqdn = "Unable to resolve FQDN"
            }
            
            # Format IP Addresses
            $ipAddresses = $networkConfig | ForEach-Object {
                $_.IPAddress | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' }
            }
            $ipAddressString = $ipAddresses -join '; '
            
            # Get Windows Server Updates with better error handling
            try {
                $hotfixes = Get-HotFix -ComputerName $server.Name | 
                    Where-Object { $_.InstalledOn -as [datetime] } |
                    Sort-Object { $_.InstalledOn -as [datetime] } -Descending |
                    Select-Object -First 1
                $latestHotfixDate = $hotfixes.InstalledOn
            }
            catch {
                $latestHotfixDate = "Unable to retrieve"
            }
            
            # Get server creation time from system directory
            try {
                $systemRoot = "\\$($server.Name)\c$\Windows"
                if (Test-Path $systemRoot) {
                    $creationTime = (Get-Item $systemRoot).CreationTime
                }
                else {
                    $creationTime = "Unable to access system directory"
                }
            }
            catch {
                $creationTime = "Unable to determine"
            }
            
            [void]$results.Add([PSCustomObject]@{
                ServerName = $server.Name
                FQDN = $fqdn
                IPAddresses = $ipAddressString
                CreationDate = $creationTime
                OSVersion = $osInfo.Caption
                OSBuildNumber = $osInfo.BuildNumber
                ServicePack = $osInfo.ServicePackMajorVersion
                LastBootTime = $osInfo.LastBootUpTime
                ExchangeVersion = $server.AdminDisplayVersion
                ExchangeEdition = $server.Edition
                ExchangeServerRole = ($server.ServerRole -join ', ')
                ExchangeSiteCode = $server.Site
                LatestHotfixDate = $latestHotfixDate
                PhysicalMemoryGB = [math]::Round($computerSystem.TotalPhysicalMemory/1GB, 2)
                ProcessorCount = $computerSystem.NumberOfProcessors
                LogicalProcessors = $computerSystem.NumberOfLogicalProcessors
                Manufacturer = $computerSystem.Manufacturer
                Model = $computerSystem.Model
            })
        }
        catch {
            [void]$results.Add([PSCustomObject]@{
                ServerName = $server.Name
                FQDN = "Error resolving FQDN"
                IPAddresses = "Error getting IP addresses"
                CreationDate = "Error getting creation date"
                OSVersion = "Error getting OS info: $_"
                ExchangeVersion = $server.AdminDisplayVersion
                ExchangeEdition = $server.Edition
                ExchangeServerRole = ($server.ServerRole -join ', ')
                ExchangeSiteCode = $server.Site
            })
        }
    }
    return $results
}

function Export-ExchangeServerReport {
    param(
        $Results,
        $OutputDir
    )
    
    $htmlPath = Join-Path $OutputDir "ExchangeServerInventory.html"
    $metadata = @{
        GeneratedBy = $env:USERNAME
        GeneratedOn = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        TotalServers = $Results.Count
    }
    
    New-HTML -Title "Exchange Server Inventory Report" -FilePath $htmlPath -ShowHTML {
        New-HTMLSection -HeaderText "Inventory Summary" {
            New-HTMLPanel {
                New-HTMLText -Text @"
                <h3>Report Details</h3>
                <ul>
                    <li>Generated By: $($metadata.GeneratedBy)</li>
                    <li>Generated On: $($metadata.GeneratedOn)</li>
                    <li>Total Servers: $($metadata.TotalServers)</li>
                </ul>
"@
            }
        }
        
        New-HTMLSection -HeaderText "Exchange Servers" {
            New-HTMLTable -DataTable $Results -ScrollX -Buttons @('copyHtml5', 'excelHtml5', 'csvHtml5') -SearchBuilder {
                New-TableCondition -Name 'OSVersion' -ComparisonType 'string' -Operator 'contains' -Value 'Error' -BackgroundColor '#ffcdd2' -Color '#000000'
            }
        }
    }
}

# Alternative quick view function for direct console output
function Show-ExchangeServerQuickView {
    $results = Get-ExchangeServerDetails
    $results | Out-HtmlView -Title "Exchange Server Inventory" -SearchBuilder
}

# Main execution block
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$outputDir = Join-Path $PSScriptRoot "ExchangeInventory_$timestamp"
if (-not (Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir | Out-Null
}

Write-Host "Gathering Exchange Server details..." -ForegroundColor Yellow
$results = Get-ExchangeServerDetails

# Export reports
$results | Export-Csv -Path (Join-Path $outputDir "exchange_server_inventory.csv") -NoTypeInformation
Export-ExchangeServerReport -Results $results -OutputDir $outputDir

Write-Host "Reports generated in: $outputDir" -ForegroundColor Green